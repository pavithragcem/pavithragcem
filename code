!pip install opencv-python-headless pillow matplotlib scikit-image scikit-learn
  import cv2

def capture_image(camera_index=0):
    cap = cv2.VideoCapture(camera_index)
    ret, frame = cap.read()
    cap.release()
    return frame if ret else None
def noise_reduction(image):
    return cv2.GaussianBlur(image, (5, 5), 0)

def adaptive_histogram_equalization(image):
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    return clahe.apply(image)
import numpy as np
from skimage.feature import greycomatrix, greycoprops, local_binary_pattern

def extract_glcm_features(image):
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    glcm = greycomatrix(gray_image, distances=[1], angles=[0], symmetric=True, normed=True)
    features = {
        'contrast': greycoprops(glcm, 'contrast')[0, 0],
        'correlation': greycoprops(glcm, 'correlation')[0, 0],
        'energy': greycoprops(glcm, 'energy')[0, 0],
        'homogeneity': greycoprops(glcm, 'homogeneity')[0, 0],
    }
    return features

def extract_lbp_features(image):
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    lbp = local_binary_pattern(gray_image, P=8, R=1, method='uniform')
    return lbp.flatten()
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier

def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
    
    # Support Vector Machine
    svm_model = SVC()
    svm_model.fit(X_train, y_train)

    # Neural Network Classifier
    nn_model = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500)
    nn_model.fit(X_train, y_train)

    return svm_model, nn_model
def real_time_crack_detection(camera_index=0):
    cap = cv2.VideoCapture(camera_index)
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        processed_image = noise_reduction(frame)
        processed_image = adaptive_histogram_equalization(processed_image)

        features = extract_glcm_features(processed_image)
        lbp_features = extract_lbp_features(processed_image)

        # Combine features for classification
        combined_features = np.concatenate([list(features.values()), lbp_features])
        
        # Here, you would call your trained models for prediction
        # prediction = svm_model.predict([combined_features])
        
        cv2.imshow('Frame', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
